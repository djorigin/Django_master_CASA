name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  SECRET_KEY: test-secret-key-for-github-actions
  DEBUG: False

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]



    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt

    - name: Run Django system checks
      env:
        DJANGO_SETTINGS_MODULE: darklightMETA_studio.ci_test_settings
      run: |
        python manage.py check

    - name: Run migrations (dry-run)
      env:
        DJANGO_SETTINGS_MODULE: darklightMETA_studio.ci_test_settings
      run: |
        python manage.py makemigrations --check --dry-run

    - name: Run tests with coverage
      env:
        DJANGO_SETTINGS_MODULE: darklightMETA_studio.ci_test_settings
      run: |
        coverage run --source='.' manage.py test accounts.tests
        coverage report --show-missing
        coverage xml

    - name: Upload coverage reports to Codecov
      if: ${{ secrets.CODECOV_TOKEN }}
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Django Security Check
      env:
        DJANGO_SETTINGS_MODULE: darklightMETA_studio.ci_test_settings
      run: |
        python manage.py check --deploy



  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies and linting tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt

    - name: Run Black (code formatter)
      run: |
        black --check --diff .

    - name: Run isort (import sorter)
      run: |
        isort --check-only --diff .

    - name: Run flake8 (linter)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run mypy (type checker)
      run: |
        mypy accounts/ --ignore-missing-imports || true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety (dependency vulnerability scanner)
      run: |
        safety check --json || true

    - name: Run bandit (security linter)
      run: |
        bandit -r . -f json || true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "ðŸš€ Deployment step - Configure your deployment method here"
        echo "Examples: SSH deployment, Docker registry push, AWS/Azure deployment"
        # Add your deployment script here