# Generated by Django 5.2.7 on 2025-10-22 11:09

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0005_keypersonnel"),
        ("aircraft", "0001_initial"),
        ("airspace", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="FlightPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flight_plan_id",
                    models.CharField(
                        help_text="Unique flight plan identifier",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Format: FPL-YYYY-XXXXXX",
                                regex="^FPL-\\d{4}-\\d{6}$",
                            )
                        ],
                        verbose_name="Flight Plan ID",
                    ),
                ),
                (
                    "flight_type",
                    models.CharField(
                        choices=[
                            ("line_of_sight", "Visual Line of Sight (VLOS)"),
                            ("extended_vlos", "Extended Visual Line of Sight (EVLOS)"),
                            ("beyond_vlos", "Beyond Visual Line of Sight (BVLOS)"),
                            ("night_operations", "Night Operations"),
                            ("controlled_airspace", "Controlled Airspace Operations"),
                        ],
                        help_text="Type of flight operation",
                        max_length=20,
                        verbose_name="Flight Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted for Approval"),
                            ("approved", "Approved"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        help_text="Current flight plan status",
                        max_length=15,
                        verbose_name="Status",
                    ),
                ),
                (
                    "departure_location",
                    models.CharField(
                        help_text="Departure location description",
                        max_length=200,
                        verbose_name="Departure Location",
                    ),
                ),
                (
                    "departure_latitude",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="Departure latitude in decimal degrees",
                        max_digits=10,
                        verbose_name="Departure Latitude",
                    ),
                ),
                (
                    "departure_longitude",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="Departure longitude in decimal degrees",
                        max_digits=10,
                        verbose_name="Departure Longitude",
                    ),
                ),
                (
                    "planned_altitude_agl",
                    models.PositiveIntegerField(
                        help_text="Planned operating altitude above ground level",
                        validators=[django.core.validators.MaxValueValidator(400)],
                        verbose_name="Planned Altitude AGL (feet)",
                    ),
                ),
                (
                    "maximum_range_from_pilot",
                    models.PositiveIntegerField(
                        help_text="Maximum distance from remote pilot",
                        validators=[django.core.validators.MaxValueValidator(500)],
                        verbose_name="Maximum Range from Pilot (meters)",
                    ),
                ),
                (
                    "planned_departure_time",
                    models.DateTimeField(
                        help_text="Planned flight departure time",
                        verbose_name="Planned Departure Time",
                    ),
                ),
                (
                    "estimated_flight_time",
                    models.DurationField(
                        help_text="Estimated duration of flight",
                        verbose_name="Estimated Flight Time",
                    ),
                ),
                (
                    "actual_departure_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Actual flight departure time",
                        null=True,
                        verbose_name="Actual Departure Time",
                    ),
                ),
                (
                    "actual_landing_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Actual flight landing time",
                        null=True,
                        verbose_name="Actual Landing Time",
                    ),
                ),
                (
                    "weather_minimums",
                    models.TextField(
                        help_text="Minimum weather conditions for flight",
                        verbose_name="Weather Minimums",
                    ),
                ),
                (
                    "planned_weather_check_time",
                    models.DateTimeField(
                        help_text="When weather will be checked before flight",
                        verbose_name="Planned Weather Check Time",
                    ),
                ),
                (
                    "notam_checked",
                    models.BooleanField(
                        default=False,
                        help_text="NOTAMs have been checked",
                        verbose_name="NOTAM Checked",
                    ),
                ),
                (
                    "airspace_coordination_required",
                    models.BooleanField(
                        default=False,
                        help_text="Requires coordination with ATC or other authorities",
                        verbose_name="Airspace Coordination Required",
                    ),
                ),
                (
                    "airspace_coordination_reference",
                    models.CharField(
                        blank=True,
                        help_text="ATC clearance or coordination reference",
                        max_length=100,
                        verbose_name="Airspace Coordination Reference",
                    ),
                ),
                (
                    "emergency_procedures",
                    models.TextField(
                        help_text="Emergency procedures for this flight",
                        verbose_name="Emergency Procedures",
                    ),
                ),
                (
                    "lost_link_procedures",
                    models.TextField(
                        help_text="Procedures if communication link is lost",
                        verbose_name="Lost Link Procedures",
                    ),
                ),
                (
                    "route_waypoints",
                    models.JSONField(
                        blank=True,
                        help_text="Flight route waypoints in JSON format",
                        null=True,
                        verbose_name="Route Waypoints",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "aircraft",
                    models.ForeignKey(
                        help_text="Aircraft for this flight",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="aircraft.aircraft",
                        verbose_name="Aircraft",
                    ),
                ),
                (
                    "operational_area",
                    models.ForeignKey(
                        blank=True,
                        help_text="Defined operational area (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="airspace.operationalarea",
                        verbose_name="Operational Area",
                    ),
                ),
                (
                    "pilot_in_command",
                    models.ForeignKey(
                        help_text="Remote pilot in command",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="commanded_flights",
                        to="accounts.pilotprofile",
                        verbose_name="Pilot in Command",
                    ),
                ),
                (
                    "remote_pilot_observer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Observer pilot (if required)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="observed_flights",
                        to="accounts.pilotprofile",
                        verbose_name="Remote Pilot Observer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Flight Plan",
                "verbose_name_plural": "Flight Plans",
                "ordering": ["-planned_departure_time"],
            },
        ),
        migrations.CreateModel(
            name="FlightLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "log_id",
                    models.CharField(
                        help_text="Unique flight log identifier",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Format: LOG-YYYY-XXXXXX",
                                regex="^LOG-\\d{4}-\\d{6}$",
                            )
                        ],
                        verbose_name="Log ID",
                    ),
                ),
                (
                    "takeoff_time",
                    models.DateTimeField(
                        help_text="Actual takeoff time", verbose_name="Takeoff Time"
                    ),
                ),
                (
                    "landing_time",
                    models.DateTimeField(
                        help_text="Actual landing time", verbose_name="Landing Time"
                    ),
                ),
                (
                    "flight_time",
                    models.DurationField(
                        help_text="Total flight time", verbose_name="Flight Time"
                    ),
                ),
                (
                    "maximum_altitude_achieved",
                    models.PositiveIntegerField(
                        help_text="Highest altitude reached during flight",
                        verbose_name="Maximum Altitude Achieved (feet AGL)",
                    ),
                ),
                (
                    "maximum_range_achieved",
                    models.PositiveIntegerField(
                        help_text="Furthest distance from takeoff point",
                        verbose_name="Maximum Range Achieved (meters)",
                    ),
                ),
                (
                    "pre_flight_battery_voltage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Battery voltage before flight",
                        max_digits=4,
                        verbose_name="Pre-flight Battery Voltage",
                    ),
                ),
                (
                    "post_flight_battery_voltage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Battery voltage after flight",
                        max_digits=4,
                        verbose_name="Post-flight Battery Voltage",
                    ),
                ),
                (
                    "wind_speed_takeoff",
                    models.PositiveIntegerField(
                        help_text="Wind speed at takeoff",
                        verbose_name="Wind Speed at Takeoff (knots)",
                    ),
                ),
                (
                    "wind_direction_takeoff",
                    models.PositiveIntegerField(
                        help_text="Wind direction at takeoff",
                        validators=[django.core.validators.MaxValueValidator(360)],
                        verbose_name="Wind Direction at Takeoff (degrees)",
                    ),
                ),
                (
                    "temperature_celsius",
                    models.IntegerField(
                        help_text="Temperature during flight",
                        verbose_name="Temperature (°C)",
                    ),
                ),
                (
                    "visibility_meters",
                    models.PositiveIntegerField(
                        help_text="Visibility during flight",
                        verbose_name="Visibility (meters)",
                    ),
                ),
                (
                    "log_entry_type",
                    models.CharField(
                        choices=[
                            ("normal", "Normal Flight"),
                            ("training", "Training Flight"),
                            ("test", "Test Flight"),
                            ("maintenance_test", "Maintenance Test Flight"),
                            ("emergency_return", "Emergency Return"),
                            ("incident", "Incident Flight"),
                        ],
                        default="normal",
                        help_text="Type of flight log entry",
                        max_length=20,
                        verbose_name="Log Entry Type",
                    ),
                ),
                (
                    "objectives_achieved",
                    models.BooleanField(
                        default=True,
                        help_text="Flight objectives were achieved",
                        verbose_name="Objectives Achieved",
                    ),
                ),
                (
                    "technical_issues",
                    models.TextField(
                        blank=True,
                        help_text="Any technical issues encountered",
                        verbose_name="Technical Issues",
                    ),
                ),
                (
                    "weather_issues",
                    models.TextField(
                        blank=True,
                        help_text="Any weather-related issues",
                        verbose_name="Weather Issues",
                    ),
                ),
                (
                    "operational_notes",
                    models.TextField(
                        blank=True,
                        help_text="General operational notes and observations",
                        verbose_name="Operational Notes",
                    ),
                ),
                (
                    "lessons_learned",
                    models.TextField(
                        blank=True,
                        help_text="Lessons learned from this flight",
                        verbose_name="Lessons Learned",
                    ),
                ),
                (
                    "pilot_performance_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes on pilot performance (for training flights)",
                        verbose_name="Pilot Performance Notes",
                    ),
                ),
                (
                    "regulatory_compliance_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes on regulatory compliance during flight",
                        verbose_name="Regulatory Compliance Notes",
                    ),
                ),
                (
                    "data_collected",
                    models.TextField(
                        blank=True,
                        help_text="Description of data/imagery collected",
                        verbose_name="Data Collected",
                    ),
                ),
                (
                    "file_references",
                    models.TextField(
                        blank=True,
                        help_text="References to collected files, images, or data",
                        verbose_name="File References",
                    ),
                ),
                (
                    "maintenance_required",
                    models.BooleanField(
                        default=False,
                        help_text="Aircraft requires maintenance after this flight",
                        verbose_name="Maintenance Required",
                    ),
                ),
                (
                    "maintenance_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes for maintenance personnel",
                        verbose_name="Maintenance Notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "flight_plan",
                    models.OneToOneField(
                        help_text="Associated flight plan",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="flight_operations.flightplan",
                        verbose_name="Flight Plan",
                    ),
                ),
            ],
            options={
                "verbose_name": "Flight Log",
                "verbose_name_plural": "Flight Logs",
                "ordering": ["-takeoff_time"],
            },
        ),
        migrations.CreateModel(
            name="Mission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mission_id",
                    models.CharField(
                        help_text="Unique mission identifier",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Format: MSN-YYYY-XXXXXX",
                                regex="^MSN-\\d{4}-\\d{6}$",
                            )
                        ],
                        verbose_name="Mission ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive mission name",
                        max_length=100,
                        verbose_name="Mission Name",
                    ),
                ),
                (
                    "mission_type",
                    models.CharField(
                        choices=[
                            ("commercial", "Commercial Operations"),
                            ("training", "Training Operations"),
                            ("research", "Research & Development"),
                            ("emergency", "Emergency Services"),
                            ("surveillance", "Surveillance"),
                            ("mapping", "Aerial Mapping"),
                            ("inspection", "Infrastructure Inspection"),
                            ("delivery", "Delivery Operations"),
                            ("photography", "Aerial Photography"),
                            ("agricultural", "Agricultural Operations"),
                            ("recreational", "Recreational"),
                            ("other", "Other"),
                        ],
                        help_text="Type of RPA operation",
                        max_length=20,
                        verbose_name="Mission Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of mission objectives",
                        verbose_name="Mission Description",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("approved", "Approved"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("suspended", "Suspended"),
                        ],
                        default="planning",
                        help_text="Current mission status",
                        max_length=15,
                        verbose_name="Mission Status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low Priority"),
                            ("medium", "Medium Priority"),
                            ("high", "High Priority"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Mission priority level",
                        max_length=10,
                        verbose_name="Priority Level",
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateTimeField(
                        help_text="Planned mission start date/time",
                        verbose_name="Planned Start Date",
                    ),
                ),
                (
                    "planned_end_date",
                    models.DateTimeField(
                        help_text="Planned mission end date/time",
                        verbose_name="Planned End Date",
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Actual mission start date/time",
                        null=True,
                        verbose_name="Actual Start Date",
                    ),
                ),
                (
                    "actual_end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Actual mission end date/time",
                        null=True,
                        verbose_name="Actual End Date",
                    ),
                ),
                (
                    "casa_authorization_required",
                    models.BooleanField(
                        default=False,
                        help_text="Mission requires specific CASA authorization",
                        verbose_name="CASA Authorization Required",
                    ),
                ),
                (
                    "casa_authorization_reference",
                    models.CharField(
                        blank=True,
                        help_text="CASA authorization or exemption reference",
                        max_length=100,
                        verbose_name="CASA Authorization Reference",
                    ),
                ),
                (
                    "risk_assessment_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Risk assessment has been completed",
                        verbose_name="Risk Assessment Completed",
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("critical", "Critical Risk"),
                        ],
                        help_text="Assessed risk level",
                        max_length=10,
                        verbose_name="Risk Level",
                    ),
                ),
                (
                    "briefing_notes",
                    models.TextField(
                        blank=True,
                        help_text="Mission briefing notes and considerations",
                        verbose_name="Briefing Notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        help_text="Client requesting the mission",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="accounts.clientprofile",
                        verbose_name="Client",
                    ),
                ),
                (
                    "mission_commander",
                    models.ForeignKey(
                        help_text="Person responsible for mission oversight",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="commanded_missions",
                        to="accounts.staffprofile",
                        verbose_name="Mission Commander",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mission",
                "verbose_name_plural": "Missions",
                "ordering": ["-planned_start_date"],
            },
        ),
        migrations.AddField(
            model_name="flightplan",
            name="mission",
            field=models.ForeignKey(
                help_text="Associated mission",
                on_delete=django.db.models.deletion.CASCADE,
                to="flight_operations.mission",
                verbose_name="Mission",
            ),
        ),
    ]
