# Generated by Django 5.2.7 on 2025-10-27 01:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0006_add_certificate_models'),
        ('aircraft', '0003_auto_calculate_flight_hours'),
        ('airspace', '0001_initial'),
        ('flight_operations', '0003_missionassignment'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AircraftFlightPlan',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'flight_plan_id',
                    models.CharField(
                        help_text='Unique flight plan identifier',
                        max_length=20,
                        unique=True,
                        verbose_name='Flight Plan ID',
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('draft', 'Draft'),
                            ('submitted', 'Submitted for Approval'),
                            ('approved', 'Approved'),
                            ('active', 'Active'),
                            ('completed', 'Completed'),
                            ('cancelled', 'Cancelled'),
                        ],
                        default='draft',
                        help_text='Current flight plan status',
                        max_length=15,
                        verbose_name='Status',
                    ),
                ),
                (
                    'planned_departure_time',
                    models.DateTimeField(
                        help_text='Planned flight departure time',
                        verbose_name='Planned Departure Time',
                    ),
                ),
                (
                    'planned_arrival_time',
                    models.DateTimeField(
                        blank=True,
                        help_text='Planned flight arrival time',
                        null=True,
                        verbose_name='Planned Arrival Time',
                    ),
                ),
                (
                    'estimated_flight_time',
                    models.DurationField(
                        help_text='Estimated duration of flight',
                        verbose_name='Estimated Flight Time',
                    ),
                ),
                (
                    'actual_departure_time',
                    models.DateTimeField(
                        blank=True,
                        help_text='Actual flight departure time',
                        null=True,
                        verbose_name='Actual Departure Time',
                    ),
                ),
                (
                    'actual_arrival_time',
                    models.DateTimeField(
                        blank=True,
                        help_text='Actual flight arrival time',
                        null=True,
                        verbose_name='Actual Arrival Time',
                    ),
                ),
                (
                    'weather_conditions',
                    models.TextField(
                        blank=True,
                        help_text='Weather conditions and requirements',
                        verbose_name='Weather Conditions',
                    ),
                ),
                (
                    'weather_minimums',
                    models.TextField(
                        help_text='Minimum weather conditions for flight',
                        verbose_name='Weather Minimums',
                    ),
                ),
                (
                    'special_instructions',
                    models.TextField(
                        blank=True,
                        help_text='Special operational instructions',
                        verbose_name='Special Instructions',
                    ),
                ),
                (
                    'emergency_procedures',
                    models.TextField(
                        help_text='Emergency procedures for this flight',
                        verbose_name='Emergency Procedures',
                    ),
                ),
                (
                    'notam_checked',
                    models.BooleanField(
                        default=False,
                        help_text='NOTAMs have been checked',
                        verbose_name='NOTAM Checked',
                    ),
                ),
                (
                    'airspace_coordination_required',
                    models.BooleanField(
                        default=False,
                        help_text='Requires coordination with ATC or other authorities',
                        verbose_name='Airspace Coordination Required',
                    ),
                ),
                (
                    'airspace_coordination_reference',
                    models.CharField(
                        blank=True,
                        help_text='ATC clearance or coordination reference',
                        max_length=100,
                        verbose_name='Airspace Coordination Reference',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'departure_airport',
                    models.CharField(
                        help_text='ICAO airport code (e.g., YSSY)',
                        max_length=4,
                        verbose_name='Departure Airport',
                    ),
                ),
                (
                    'arrival_airport',
                    models.CharField(
                        help_text='ICAO airport code (e.g., YMEL)',
                        max_length=4,
                        verbose_name='Arrival Airport',
                    ),
                ),
                (
                    'alternate_airport',
                    models.CharField(
                        blank=True,
                        help_text='Alternate ICAO airport code',
                        max_length=4,
                        verbose_name='Alternate Airport',
                    ),
                ),
                (
                    'route',
                    models.TextField(
                        help_text='Airways, waypoints, and routing information',
                        verbose_name='Route',
                    ),
                ),
                (
                    'cruise_altitude',
                    models.IntegerField(
                        help_text='Planned cruise altitude in feet above mean sea level',
                        verbose_name='Cruise Altitude (feet MSL)',
                    ),
                ),
                (
                    'fuel_required',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Total fuel required for flight',
                        max_digits=8,
                        verbose_name='Fuel Required (liters)',
                    ),
                ),
                (
                    'fuel_loaded',
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text='Actual fuel loaded on aircraft',
                        max_digits=8,
                        null=True,
                        verbose_name='Fuel Loaded (liters)',
                    ),
                ),
                (
                    'payload_weight',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Total payload weight including passengers and cargo',
                        max_digits=8,
                        verbose_name='Payload Weight (kg)',
                    ),
                ),
                (
                    'passenger_count',
                    models.PositiveIntegerField(
                        default=0,
                        help_text='Number of passengers',
                        verbose_name='Passenger Count',
                    ),
                ),
                (
                    'flight_rules',
                    models.CharField(
                        choices=[
                            ('VFR', 'Visual Flight Rules'),
                            ('IFR', 'Instrument Flight Rules'),
                        ],
                        help_text='VFR or IFR flight rules',
                        max_length=3,
                        verbose_name='Flight Rules',
                    ),
                ),
                (
                    'flight_type',
                    models.CharField(
                        choices=[
                            ('passenger', 'Passenger Transport'),
                            ('cargo', 'Cargo Transport'),
                            ('training', 'Training Flight'),
                            ('aerial_work', 'Aerial Work'),
                            ('charter', 'Charter Flight'),
                            ('positioning', 'Positioning Flight'),
                        ],
                        help_text='Type of flight operation',
                        max_length=20,
                        verbose_name='Flight Type',
                    ),
                ),
                (
                    'atc_clearance',
                    models.TextField(
                        blank=True,
                        help_text='Air traffic control clearance details',
                        verbose_name='ATC Clearance',
                    ),
                ),
                (
                    'aircraft',
                    models.ForeignKey(
                        help_text='Aircraft for this flight',
                        on_delete=django.db.models.deletion.PROTECT,
                        to='aircraft.aircraft',
                        verbose_name='Aircraft',
                    ),
                ),
                (
                    'co_pilot',
                    models.ForeignKey(
                        blank=True,
                        help_text='Co-pilot for this flight (if required)',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='aircraft_copilot_flights',
                        to='accounts.pilotprofile',
                        verbose_name='Co-pilot',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        help_text='User who created this flight plan',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Created By',
                    ),
                ),
                (
                    'mission',
                    models.ForeignKey(
                        help_text='Associated mission',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='flight_operations.mission',
                        verbose_name='Mission',
                    ),
                ),
                (
                    'pilot_in_command',
                    models.ForeignKey(
                        help_text='Pilot in command for this flight',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='aircraft_commanded_flights',
                        to='accounts.pilotprofile',
                        verbose_name='Pilot in Command',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Aircraft Flight Plan',
                'verbose_name_plural': 'Aircraft Flight Plans',
            },
        ),
        migrations.CreateModel(
            name='DroneFlightPlan',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'flight_plan_id',
                    models.CharField(
                        help_text='Unique flight plan identifier',
                        max_length=20,
                        unique=True,
                        verbose_name='Flight Plan ID',
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('draft', 'Draft'),
                            ('submitted', 'Submitted for Approval'),
                            ('approved', 'Approved'),
                            ('active', 'Active'),
                            ('completed', 'Completed'),
                            ('cancelled', 'Cancelled'),
                        ],
                        default='draft',
                        help_text='Current flight plan status',
                        max_length=15,
                        verbose_name='Status',
                    ),
                ),
                (
                    'planned_departure_time',
                    models.DateTimeField(
                        help_text='Planned flight departure time',
                        verbose_name='Planned Departure Time',
                    ),
                ),
                (
                    'planned_arrival_time',
                    models.DateTimeField(
                        blank=True,
                        help_text='Planned flight arrival time',
                        null=True,
                        verbose_name='Planned Arrival Time',
                    ),
                ),
                (
                    'estimated_flight_time',
                    models.DurationField(
                        help_text='Estimated duration of flight',
                        verbose_name='Estimated Flight Time',
                    ),
                ),
                (
                    'actual_departure_time',
                    models.DateTimeField(
                        blank=True,
                        help_text='Actual flight departure time',
                        null=True,
                        verbose_name='Actual Departure Time',
                    ),
                ),
                (
                    'actual_arrival_time',
                    models.DateTimeField(
                        blank=True,
                        help_text='Actual flight arrival time',
                        null=True,
                        verbose_name='Actual Arrival Time',
                    ),
                ),
                (
                    'weather_conditions',
                    models.TextField(
                        blank=True,
                        help_text='Weather conditions and requirements',
                        verbose_name='Weather Conditions',
                    ),
                ),
                (
                    'weather_minimums',
                    models.TextField(
                        help_text='Minimum weather conditions for flight',
                        verbose_name='Weather Minimums',
                    ),
                ),
                (
                    'special_instructions',
                    models.TextField(
                        blank=True,
                        help_text='Special operational instructions',
                        verbose_name='Special Instructions',
                    ),
                ),
                (
                    'emergency_procedures',
                    models.TextField(
                        help_text='Emergency procedures for this flight',
                        verbose_name='Emergency Procedures',
                    ),
                ),
                (
                    'notam_checked',
                    models.BooleanField(
                        default=False,
                        help_text='NOTAMs have been checked',
                        verbose_name='NOTAM Checked',
                    ),
                ),
                (
                    'airspace_coordination_required',
                    models.BooleanField(
                        default=False,
                        help_text='Requires coordination with ATC or other authorities',
                        verbose_name='Airspace Coordination Required',
                    ),
                ),
                (
                    'airspace_coordination_reference',
                    models.CharField(
                        blank=True,
                        help_text='ATC clearance or coordination reference',
                        max_length=100,
                        verbose_name='Airspace Coordination Reference',
                    ),
                ),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'flight_type',
                    models.CharField(
                        choices=[
                            ('line_of_sight', 'Visual Line of Sight (VLOS)'),
                            ('extended_vlos', 'Extended Visual Line of Sight (EVLOS)'),
                            ('beyond_vlos', 'Beyond Visual Line of Sight (BVLOS)'),
                            ('night_operations', 'Night Operations'),
                            ('controlled_airspace', 'Controlled Airspace Operations'),
                        ],
                        help_text='Type of RPAS operation',
                        max_length=20,
                        verbose_name='Flight Type',
                    ),
                ),
                (
                    'takeoff_location',
                    models.CharField(
                        help_text='Takeoff location description',
                        max_length=200,
                        verbose_name='Takeoff Location',
                    ),
                ),
                (
                    'landing_location',
                    models.CharField(
                        help_text='Landing location description',
                        max_length=200,
                        verbose_name='Landing Location',
                    ),
                ),
                (
                    'operating_area_coordinates',
                    models.JSONField(
                        default=dict,
                        help_text='Polygon boundary of operating area',
                        verbose_name='Operating Area Coordinates',
                    ),
                ),
                (
                    'maximum_altitude_agl',
                    models.PositiveIntegerField(
                        help_text='Maximum operating altitude above ground level',
                        validators=[django.core.validators.MaxValueValidator(400)],
                        verbose_name='Maximum Altitude AGL (feet)',
                    ),
                ),
                (
                    'maximum_range_from_pilot',
                    models.PositiveIntegerField(
                        help_text='Maximum distance from remote pilot',
                        validators=[django.core.validators.MaxValueValidator(500)],
                        verbose_name='Maximum Range from Pilot (meters)',
                    ),
                ),
                (
                    'battery_capacity',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Total battery capacity',
                        max_digits=8,
                        verbose_name='Battery Capacity (mAh)',
                    ),
                ),
                (
                    'estimated_battery_consumption',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Estimated battery consumption percentage',
                        max_digits=5,
                        verbose_name='Estimated Battery Consumption (%)',
                    ),
                ),
                (
                    'payload_description',
                    models.TextField(
                        help_text='Description of payload and equipment',
                        verbose_name='Payload Description',
                    ),
                ),
                (
                    'casa_approval_number',
                    models.CharField(
                        blank=True,
                        help_text='ReOC or other CASA approval reference',
                        max_length=50,
                        verbose_name='CASA Approval Number',
                    ),
                ),
                (
                    'airspace_approval',
                    models.CharField(
                        blank=True,
                        help_text='Specific airspace approval reference',
                        max_length=100,
                        verbose_name='Airspace Approval',
                    ),
                ),
                (
                    'no_fly_zones_checked',
                    models.BooleanField(
                        default=False,
                        help_text='Confirmed no-fly zones have been checked',
                        verbose_name='No-Fly Zones Checked',
                    ),
                ),
                (
                    'waypoints',
                    models.JSONField(
                        default=list,
                        help_text='GPS coordinates for automated flight path',
                        verbose_name='Waypoints',
                    ),
                ),
                (
                    'autonomous_mode',
                    models.BooleanField(
                        default=False,
                        help_text='Flight will use autonomous/automated modes',
                        verbose_name='Autonomous Mode',
                    ),
                ),
                (
                    'return_to_home_altitude',
                    models.IntegerField(
                        default=100,
                        help_text='Altitude for automated return to home function',
                        verbose_name='Return to Home Altitude (feet AGL)',
                    ),
                ),
                (
                    'lost_link_procedures',
                    models.TextField(
                        help_text='Procedures if communication link is lost with RPA',
                        verbose_name='Lost Link Procedures',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        help_text='User who created this flight plan',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Created By',
                    ),
                ),
                (
                    'drone',
                    models.ForeignKey(
                        help_text='Drone/RPA for this flight',
                        on_delete=django.db.models.deletion.PROTECT,
                        to='aircraft.aircraft',
                        verbose_name='Drone/RPA',
                    ),
                ),
                (
                    'mission',
                    models.ForeignKey(
                        help_text='Associated mission',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='flight_operations.mission',
                        verbose_name='Mission',
                    ),
                ),
                (
                    'operational_area',
                    models.ForeignKey(
                        blank=True,
                        help_text='Defined operational area (if applicable)',
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='airspace.operationalarea',
                        verbose_name='Operational Area',
                    ),
                ),
                (
                    'remote_pilot',
                    models.ForeignKey(
                        help_text='Remote pilot in command',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='drone_commanded_flights',
                        to='accounts.pilotprofile',
                        verbose_name='Remote Pilot in Command',
                    ),
                ),
                (
                    'visual_observer',
                    models.ForeignKey(
                        blank=True,
                        help_text='Visual observer (if required)',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='drone_observed_flights',
                        to='accounts.pilotprofile',
                        verbose_name='Visual Observer',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Drone Flight Plan',
                'verbose_name_plural': 'Drone Flight Plans',
            },
        ),
    ]
